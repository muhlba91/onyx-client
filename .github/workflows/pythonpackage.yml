name: Python package

on:
  push:
    branches:
      - main
      - next

jobs:
  test:
    runs-on: ubuntu-latest
    name: Check the Codebase
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]
        poetry-version: [1.4.0]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry ${{ matrix.poetry-version }}
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Cache Poetry
        uses: actions/cache@v3
        env:
          cache-name: cache-poetry
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          poetry install

      - name: Lint files
        run: |
          poetry check
          poetry run flakeheaven lint
          poetry run black --check .

      - name: Run tests
        run: |
          poetry run pytest

      - name: Coveralls
        run: |
          poetry run coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    name: Build and Publish to TestPyPi and PyPi
    if: startsWith(github.ref, 'refs/heads/main') || github.ref == 'refs/heads/next'
    needs:
      - test
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.11]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        if: github.ref == 'refs/heads/main'
        uses: actions/setup-node@v3
        with:
          node-version: "12"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Setup Git
        run: |
          git config --local user.email "${{ env.GITHUB_ACTION }}+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch --tags

      - name: Versioning and Changelog
        if: github.ref == 'refs/heads/main'
        run: |
          npx standard-version -i release-CHANGELOG.md --skip.commit --skip.tag
          npx standard-version

      - name: Cache Poetry
        uses: actions/cache@v3
        env:
          cache-name: cache-poetry
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build a binary wheel and a source tarball
        run: |
          python -m build

      - name: Publish distribution to TestPyPi
        if: github.ref == 'refs/heads/next'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish release distribution to PyPi
        if: github.ref == 'refs/heads/main'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Push to Repository
        if: github.ref == 'refs/heads/main'
        run: |
          git push --follow-tags

      - name: Get Tag for Release
        if: github.ref == 'refs/heads/main'
        run: |
          echo "TAG_NAME=`git describe --abbrev=0 --match "v*"`" >> $GITHUB_ENV

      - name: Release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          bodyFile: "release-CHANGELOG.md"
          name: "${{ env.TAG_NAME }}"
          tag: "${{ env.TAG_NAME }}"
          token: "${{ secrets.GITHUB_TOKEN }}"
